package DAS_ML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActionExpression;
  private ConceptPresentation props_AndLogicalExpression;
  private ConceptPresentation props_AntecipatedScenarioRelationship;
  private ConceptPresentation props_BatteryCapacityRelationalExpression;
  private ConceptPresentation props_BatteryCurrentRelationalExpression;
  private ConceptPresentation props_BatteryPercentageRelationalExpression;
  private ConceptPresentation props_BatteryStatusRelationalExpression;
  private ConceptPresentation props_BatteryVoltageRelationalExpression;
  private ConceptPresentation props_ConditionalExpression;
  private ConceptPresentation props_DroneAntecipatedScenario;
  private ConceptPresentation props_HighAntecipatedScenarios;
  private ConceptPresentation props_LogicalExpression;
  private ConceptPresentation props_OrLogicalExpression;
  private ConceptPresentation props_RelationalExpression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionExpression:
        if (props_ActionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ActionExpression");
          props_ActionExpression = cpb.create();
        }
        return props_ActionExpression;
      case LanguageConceptSwitch.AndLogicalExpression:
        if (props_AndLogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AndLogicalExpression");
          props_AndLogicalExpression = cpb.create();
        }
        return props_AndLogicalExpression;
      case LanguageConceptSwitch.AntecipatedScenarioRelationship:
        if (props_AntecipatedScenarioRelationship == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AntecipatedScenarioRelationship");
          props_AntecipatedScenarioRelationship = cpb.create();
        }
        return props_AntecipatedScenarioRelationship;
      case LanguageConceptSwitch.BatteryCapacityRelationalExpression:
        if (props_BatteryCapacityRelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BatteryCapacityRelationalExpression");
          props_BatteryCapacityRelationalExpression = cpb.create();
        }
        return props_BatteryCapacityRelationalExpression;
      case LanguageConceptSwitch.BatteryCurrentRelationalExpression:
        if (props_BatteryCurrentRelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BatteryCurrentRelationalExpression");
          props_BatteryCurrentRelationalExpression = cpb.create();
        }
        return props_BatteryCurrentRelationalExpression;
      case LanguageConceptSwitch.BatteryPercentageRelationalExpression:
        if (props_BatteryPercentageRelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BatteryPercentageRelationalExpression");
          props_BatteryPercentageRelationalExpression = cpb.create();
        }
        return props_BatteryPercentageRelationalExpression;
      case LanguageConceptSwitch.BatteryStatusRelationalExpression:
        if (props_BatteryStatusRelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BatteryStatusRelationalExpression");
          props_BatteryStatusRelationalExpression = cpb.create();
        }
        return props_BatteryStatusRelationalExpression;
      case LanguageConceptSwitch.BatteryVoltageRelationalExpression:
        if (props_BatteryVoltageRelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BatteryVoltageRelationalExpression");
          props_BatteryVoltageRelationalExpression = cpb.create();
        }
        return props_BatteryVoltageRelationalExpression;
      case LanguageConceptSwitch.ConditionalExpression:
        if (props_ConditionalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConditionalExpression = cpb.create();
        }
        return props_ConditionalExpression;
      case LanguageConceptSwitch.DroneAntecipatedScenario:
        if (props_DroneAntecipatedScenario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DroneAntecipatedScenario");
          props_DroneAntecipatedScenario = cpb.create();
        }
        return props_DroneAntecipatedScenario;
      case LanguageConceptSwitch.HighAntecipatedScenarios:
        if (props_HighAntecipatedScenarios == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HighAntecipatedScenarios = cpb.create();
        }
        return props_HighAntecipatedScenarios;
      case LanguageConceptSwitch.LogicalExpression:
        if (props_LogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LogicalExpression = cpb.create();
        }
        return props_LogicalExpression;
      case LanguageConceptSwitch.OrLogicalExpression:
        if (props_OrLogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OrLogicalExpression");
          props_OrLogicalExpression = cpb.create();
        }
        return props_OrLogicalExpression;
      case LanguageConceptSwitch.RelationalExpression:
        if (props_RelationalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RelationalExpression = cpb.create();
        }
        return props_RelationalExpression;
    }
    return null;
  }
}
