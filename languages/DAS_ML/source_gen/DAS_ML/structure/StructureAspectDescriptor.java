package DAS_ML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptActionExpression = createDescriptorForActionExpression();
  /*package*/ final ConceptDescriptor myConceptAndLogicalExpression = createDescriptorForAndLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptAntecipatedScenarioRelationship = createDescriptorForAntecipatedScenarioRelationship();
  /*package*/ final ConceptDescriptor myConceptBatteryCapacityRelationalExpression = createDescriptorForBatteryCapacityRelationalExpression();
  /*package*/ final ConceptDescriptor myConceptBatteryCurrentRelationalExpression = createDescriptorForBatteryCurrentRelationalExpression();
  /*package*/ final ConceptDescriptor myConceptBatteryPercentageRelationalExpression = createDescriptorForBatteryPercentageRelationalExpression();
  /*package*/ final ConceptDescriptor myConceptBatteryStatusRelationalExpression = createDescriptorForBatteryStatusRelationalExpression();
  /*package*/ final ConceptDescriptor myConceptBatteryVoltageRelationalExpression = createDescriptorForBatteryVoltageRelationalExpression();
  /*package*/ final ConceptDescriptor myConceptConditionalExpression = createDescriptorForConditionalExpression();
  /*package*/ final ConceptDescriptor myConceptDroneAntecipatedScenario = createDescriptorForDroneAntecipatedScenario();
  /*package*/ final ConceptDescriptor myConceptHighAntecipatedScenarios = createDescriptorForHighAntecipatedScenarios();
  /*package*/ final ConceptDescriptor myConceptLogicalExpression = createDescriptorForLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptOrLogicalExpression = createDescriptorForOrLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptRelationalExpression = createDescriptorForRelationalExpression();
  /*package*/ final EnumerationDescriptor myEnumerationRelationalOperatorEnum = new EnumerationDescriptor_RelationalOperatorEnum();
  /*package*/ final EnumerationDescriptor myEnumerationStatusEnum = new EnumerationDescriptor_StatusEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActionExpression, myConceptAndLogicalExpression, myConceptAntecipatedScenarioRelationship, myConceptBatteryCapacityRelationalExpression, myConceptBatteryCurrentRelationalExpression, myConceptBatteryPercentageRelationalExpression, myConceptBatteryStatusRelationalExpression, myConceptBatteryVoltageRelationalExpression, myConceptConditionalExpression, myConceptDroneAntecipatedScenario, myConceptHighAntecipatedScenarios, myConceptLogicalExpression, myConceptOrLogicalExpression, myConceptRelationalExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ActionExpression:
        return myConceptActionExpression;
      case LanguageConceptSwitch.AndLogicalExpression:
        return myConceptAndLogicalExpression;
      case LanguageConceptSwitch.AntecipatedScenarioRelationship:
        return myConceptAntecipatedScenarioRelationship;
      case LanguageConceptSwitch.BatteryCapacityRelationalExpression:
        return myConceptBatteryCapacityRelationalExpression;
      case LanguageConceptSwitch.BatteryCurrentRelationalExpression:
        return myConceptBatteryCurrentRelationalExpression;
      case LanguageConceptSwitch.BatteryPercentageRelationalExpression:
        return myConceptBatteryPercentageRelationalExpression;
      case LanguageConceptSwitch.BatteryStatusRelationalExpression:
        return myConceptBatteryStatusRelationalExpression;
      case LanguageConceptSwitch.BatteryVoltageRelationalExpression:
        return myConceptBatteryVoltageRelationalExpression;
      case LanguageConceptSwitch.ConditionalExpression:
        return myConceptConditionalExpression;
      case LanguageConceptSwitch.DroneAntecipatedScenario:
        return myConceptDroneAntecipatedScenario;
      case LanguageConceptSwitch.HighAntecipatedScenarios:
        return myConceptHighAntecipatedScenarios;
      case LanguageConceptSwitch.LogicalExpression:
        return myConceptLogicalExpression;
      case LanguageConceptSwitch.OrLogicalExpression:
        return myConceptOrLogicalExpression;
      case LanguageConceptSwitch.RelationalExpression:
        return myConceptRelationalExpression;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationRelationalOperatorEnum, myEnumerationStatusEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForActionExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "ActionExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff5L);
    b.class_(false, false, false);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133941");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAndLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "AndLogicalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b003L);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.LogicalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b001L);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133955");
    b.version(3);
    b.aggregate("conditionalExpression1", 0x7c73d2235cc8b904L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347136260").done();
    b.aggregate("conditionalExpression2", 0x7c73d2235cc8b905L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347136261").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAntecipatedScenarioRelationship() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "AntecipatedScenarioRelationship", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff7L);
    b.class_(false, false, false);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133943");
    b.version(3);
    b.aggregate("sourceAntecipatedScenario", 0x7c73d2235cc8affcL).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afecL).optional(false).ordered(true).multiple(true).origin("8967742332347133948").done();
    b.aggregate("destinationAntecipatedScenario", 0x7c73d2235cc8affdL).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afecL).optional(true).ordered(true).multiple(true).origin("8967742332347133949").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryCapacityRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "BatteryCapacityRelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc9a66cL);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.RelationalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347197036");
    b.version(3);
    b.property("capacity", 0x3f95b80d2224fb50L).type(PrimitiveTypeId.INTEGER).origin("4581770562466282320").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryCurrentRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "BatteryCurrentRelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc0L);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.RelationalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347310016");
    b.version(3);
    b.property("current", 0x3f95b80d2224fdf6L).type(PrimitiveTypeId.INTEGER).origin("4581770562466282998").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryPercentageRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "BatteryPercentageRelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc2L);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.RelationalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347310018");
    b.version(3);
    b.property("percentage", 0x7c73d2235ccb5fc7L).type(PrimitiveTypeId.INTEGER).origin("8967742332347310023").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryStatusRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "BatteryStatusRelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc4L);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.RelationalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347310020");
    b.version(3);
    b.property("status", 0x7c73d2235ccb6001L).type(MetaIdFactory.dataTypeId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5ff4L)).origin("8967742332347310081").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBatteryVoltageRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "BatteryVoltageRelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fbcL);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.RelationalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347310012");
    b.version(3);
    b.property("voltage", 0x3f95b80d222344b3L).type(PrimitiveTypeId.INTEGER).origin("4581770562466170035").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "ConditionalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L);
    b.class_(false, true, false);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133940");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDroneAntecipatedScenario() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "DroneAntecipatedScenario", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afecL);
    b.class_(false, false, false);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133932");
    b.version(3);
    b.property("name", 0x7c73d2235cc8afedL).type(PrimitiveTypeId.STRING).origin("8967742332347133933").done();
    b.property("description", 0x7c73d2235cc8afeeL).type(PrimitiveTypeId.STRING).origin("8967742332347133934").done();
    b.aggregate("given", 0x7c73d2235cc8afefL).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347133935").done();
    b.aggregate("when", 0x7c73d2235cc8aff0L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347133936").done();
    b.aggregate("do", 0x7c73d2235cc8aff1L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff5L).optional(false).ordered(true).multiple(false).origin("8967742332347133937").done();
    b.aggregate("then", 0x7c73d2235cc8aff2L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347133938").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHighAntecipatedScenarios() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "HighAntecipatedScenarios", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afeaL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133930");
    b.version(3);
    b.aggregate("droneAntecipatedScenario", 0x7c73d2235cc8afebL).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afecL).optional(false).ordered(true).multiple(true).origin("8967742332347133931").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "LogicalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b001L);
    b.class_(false, true, false);
    // extends: DAS_ML.structure.ConditionalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133953");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "OrLogicalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b004L);
    b.class_(false, false, false);
    // extends: DAS_ML.structure.LogicalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b001L);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133956");
    b.version(3);
    b.aggregate("conditionalExpression1", 0x7c73d2235cc8b907L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347136263").done();
    b.aggregate("conditionalExpression2", 0x7c73d2235cc8b908L).target(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L).optional(false).ordered(true).multiple(false).origin("8967742332347136264").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRelationalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("DAS_ML", "RelationalExpression", 0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afffL);
    b.class_(false, true, false);
    // extends: DAS_ML.structure.ConditionalExpression
    b.super_(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8aff4L);
    b.origin("r:356976db-ed45-449a-b8b5-b0d06c4a39c5(DAS_ML.structure)/8967742332347133951");
    b.version(3);
    b.property("relational_operator", 0x7c73d2235ccb5fedL).type(MetaIdFactory.dataTypeId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fd8L)).origin("8967742332347310061").done();
    return b.create();
  }
}
