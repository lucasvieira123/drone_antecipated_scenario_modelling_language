package DAS_ML.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ActionExpression = 0;
  public static final int AndLogicalExpression = 1;
  public static final int AntecipatedScenarioRelationship = 2;
  public static final int BatteryCapacityRelationalExpression = 3;
  public static final int BatteryCurrentRelationalExpression = 4;
  public static final int BatteryPercentageRelationalExpression = 5;
  public static final int BatteryStatusRelationalExpression = 6;
  public static final int BatteryVoltageRelationalExpression = 7;
  public static final int ConditionalExpression = 8;
  public static final int DroneAntecipatedScenario = 9;
  public static final int HighAntecipatedScenarios = 10;
  public static final int LogicalExpression = 11;
  public static final int OrLogicalExpression = 12;
  public static final int RelationalExpression = 13;
  public static final int UAVManeuverDirectionRelationalExpression = 14;
  public static final int UAVManeuverDirectionToRegionRelationalExpression = 15;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L);
    builder.put(0x7c73d2235cc8aff5L, ActionExpression);
    builder.put(0x7c73d2235cc8b003L, AndLogicalExpression);
    builder.put(0x7c73d2235cc8aff7L, AntecipatedScenarioRelationship);
    builder.put(0x7c73d2235cc9a66cL, BatteryCapacityRelationalExpression);
    builder.put(0x7c73d2235ccb5fc0L, BatteryCurrentRelationalExpression);
    builder.put(0x7c73d2235ccb5fc2L, BatteryPercentageRelationalExpression);
    builder.put(0x7c73d2235ccb5fc4L, BatteryStatusRelationalExpression);
    builder.put(0x7c73d2235ccb5fbcL, BatteryVoltageRelationalExpression);
    builder.put(0x7c73d2235cc8aff4L, ConditionalExpression);
    builder.put(0x7c73d2235cc8afecL, DroneAntecipatedScenario);
    builder.put(0x7c73d2235cc8afeaL, HighAntecipatedScenarios);
    builder.put(0x7c73d2235cc8b001L, LogicalExpression);
    builder.put(0x7c73d2235cc8b004L, OrLogicalExpression);
    builder.put(0x7c73d2235cc8afffL, RelationalExpression);
    builder.put(0x649e0bc4ee41c419L, UAVManeuverDirectionRelationalExpression);
    builder.put(0x649e0bc4ee44945dL, UAVManeuverDirectionToRegionRelationalExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
