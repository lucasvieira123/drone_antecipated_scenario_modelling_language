package DAS_ML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AndLogicalExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BatteryCapacityRelationalExpression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BatteryCurrentRelationalExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BatteryPercentageRelationalExpression_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BatteryStatusRelationalExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BatteryVoltageRelationalExpression_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DroneAntecipatedScenario_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new HighAntecipatedScenarios_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new OrLogicalExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionRelationalExpression_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new UAVManeuverDirectionToRegionRelationalExpression_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b003L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc9a66cL), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc0L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc2L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fc4L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235ccb5fbcL), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afecL), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8afeaL), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x7c73d2235cc8b004L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x649e0bc4ee41c419L), MetaIdFactory.conceptId(0xb5193d0ff2e3489fL, 0x8a11cbd304ed9c53L, 0x649e0bc4ee44945dL)).seal();
}
